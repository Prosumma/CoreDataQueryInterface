#!/usr/bin/env ruby

require 'date'
require 'find'
require 'optparse'
require 'ostruct'

RESERVED_ATTRIBUTE_NAMES = %w{count sum average max min}

$options = OpenStruct::new
$options.force = false
$options.input_path = "."
$options.output_path = nil
$options.merged = false
$options.excluded_entities = []
$options.included_entities = []
$options.access_modifier = ""
$options.suffix = "Attribute"
$options.indent = 4

option_parser = OptionParser::new do |opts|
  opts.on("-f", "--force", "Force overwrite existing files") do |opt|
    $options.force = opt
  end
  opts.on("-i", "--in=PATH", "Where to start searching for the data model (defaults to current directory)") do |opt|
    $options.input_path = File::expand_path(opt)
  end
  opts.on("-o", "--out=PATH", "Where to put the resulting files (defaults to same directory as data model)") do |opt|
    $options.output_path = File::expand_path(opt)
  end
  opts.on("-m", "--merged", "Creates a single file using the name of the data model") do |opt|
    $options.merged = opt
  end
  opts.on("-x", "--exclude=ENTITY", "Exclude an entity") do |opt|
    $options.excluded_entities << opt
  end
  opts.on("-w", "--write=ENTITY", "Write only this entity to the output") do |opt|
    $options.included_entities << opt
  end
  opts.on("-p", "--public", "Make generated classes public") do |opt|
    $options.access_modifier = opt ? 'public ' : ''
  end
  opts.on("-s", "--suffix=SUFFIX", "Suffix to use on generated classes and filenames (defaults to Attribute)") do |opt|
    $options.suffix = opt
  end
  opts.on("-n", "--indent=COUNT", OptionParser::DecimalInteger, "Number of spaces to indent (defaults to 2)") do |opt|
    $options.indent = opt
  end
end

models = option_parser.parse(ARGV)
if models.length == 0
  abort "ERROR: No data model specified. Quitting."
elsif models.length > 1
  abort "ERROR: Multiple data models specified. Please specify only one data model. Quitting."
end

model = models[0]
model_path = nil

Find::find($options.input_path) do |path|
  if path =~ /#{Regexp.quote(model)}\.xcdatamodeld$/
    model_path = path
    $options.output_path ||= File::dirname(path)
    break
  end
end

abort "Could not find #{model} data model in #{$options.input_path}. Quitting." if model_path.nil?

require 'rexml/document'
require 'rexml/xpath'

class IndentWriter
  def initialize(io)
    @io = io
    @level = 0
  end
  def puts(s)
    @io.puts "#{''.ljust($options.indent * @level, ' ')}#{s}"
  end
  def indent(level = 1)
    @level += level
    yield
    @level -= level
  end
end

class Attribute
  def initialize(name, entity: nil, type: nil)
    @name = name
    @entity = entity
    @type = type
  end

  def attribute_class_name
    prefix = ''
    if @type
      case @type
      when 'Binary' then 'DateAttribute'
      when 'Boolean' then 'BoolAttribute'
      when 'Date' then 'DateAttribute'
      when 'Decimal' then 'DecimalAttribute'
      when 'Double' then 'DoubleAttribute'
      when 'Float' then 'FloatAttribute'
      when 'Integer 16' then 'Integer16Attribute'
      when 'Integer 32' then 'Integer32Attribute'
      when 'Integer 64' then 'Integer64Attribute'
      when 'String' then 'StringAttribute'
      else
        raise @type
      end
    else
     "#{@entity}#{$options.suffix}"     
    end
  end

  def render(io)
    io.puts "#{$options.access_modifier}private(set) lazy var #{@name}: #{attribute_class_name} = { #{attribute_class_name}(key: \"#{@name}\", parent: self) }()"
  end
end

class Entity
  attr_reader :name, :entity_class_name
  def initialize(name)
    @name = name
    @attributes = []
    @entity_class_name = "#{@name}#{$options.suffix}"
  end
  def <<(attribute)
    @attributes << attribute
  end
  def render(io)
    io.puts "#{$options.access_modifier}final class #{@entity_class_name}: EntityAttribute, Subqueryable {"
    io.indent do
      @attributes.each do |attribute|
        attribute.render(io)
      end
    end
    io.puts "}"
    io.puts ""
    io.puts "extension #{@name}: Entity {"
    io.indent do
      io.puts "#{$options.access_modifier}typealias CDQIAttribute = #{@entity_class_name}"
    end
    io.puts "}"
    io.puts ""
  end
end

entities = []

currentversion_path = File::join(model_path, '.xccurrentversion')
if File::exists? currentversion_path
  File::open(currentversion_path) do |fd|
    xml = REXML::Document::new(fd)
    model_path = File::join(model_path, REXML::XPath::first(xml, "//key[.='_XCCurrentVersionName']/following-sibling::string").text)
    $stderr.puts "NOTICE: Using data model at #{model_path}."
    model_path = File::join(model_path, 'contents')
  end
else
  model_path = File::join(model_path, "#{model}.xcdatamodel/contents")
end

File::open(model_path) do |fd|
  xml = REXML::Document::new(fd)
  classes_by_entity_name = {}
  # Build map of entity_name => class and excluded entities
  xml.root.elements.each('entity') do |entity_node|
    entity_name = entity_node.attributes['name']
    represented_class = entity_node.attributes['representedClassName']
    excluded = false
    if represented_class.nil?
      $stderr.puts "WARNING: The entity '#{entity_name}' was skipped because it has no represented class."
      excluded = true
    else
      represented_class = represented_class.split('.')[-1]
    end
    if ['String', 'Numeric', 'Date', 'Data', 'Entity'].include?(represented_class) && $options.suffix == 'Attribute'
      $stderr.puts "WARNING: The entity '#{entity_name}' represented by the class '#{represented_class}' was skipped because the name of its generated proxy would conflict with CDQI's '#{represented_class}Attribute'. You can avoid this by using a different represented class name or a suffix other than 'Attribute'."
      excluded = true
    end
    if excluded
      $options.excluded_entities << entity_name
      next
    else
      classes_by_entity_name[entity_name] = represented_class
    end
  end
  xml.root.elements.each('entity') do |entity_node|
    entity_name = entity_node.attributes['name']
    represented_class = classes_by_entity_name[entity_name]
    if !$options.excluded_entities.include?(entity_name) && ($options.included_entities.empty? || $options.included_entities.include?(entity_name))
      entity_name = represented_class.split('.')[-1]
      entity = Entity::new(entity_name)
      entity_node.elements.each('attribute') do |attribute_node|
        attribute_name = attribute_node.attributes['name']
        if RESERVED_ATTRIBUTE_NAMES.include?(attribute_name)
          $stderr.puts "WARNING: The attribute '#{attribute_name}' in the '#{entity_node.attributes['name']}' entity has been skipped because it conflicts with the name of an aggregate property."
        else
          attribute_type = attribute_node.attributes['attributeType']
          if attribute_type == 'Transformable' then
            $stderr.puts "WARNING: The attribute '#{attribute_name}' in the '#{entity_node.attributes['name']}' entity has been skipped because it is a transformable attribute. Transformable attributes are not currently supported."
          else
            entity << Attribute::new(attribute_name, entity: nil, type: attribute_type)
          end
        end
      end
      entity_node.elements.each('relationship') do |relationship_node|
        destination_entity_name = relationship_node.attributes['destinationEntity']
        destination_class = classes_by_entity_name[destination_entity_name]
        unless $options.excluded_entities.include?(destination_entity_name) || destination_class.nil?
          attribute_name = relationship_node.attributes['name']
          entity << Attribute::new(attribute_name, entity: destination_class)
        end
      end
      entities << entity
    end
  end
end

def write_file_header(io)
  io.puts "//"
  io.puts "// Generated by CDQI on #{DateTime::now.strftime('%Y-%m-%d')}."
  io.puts "//"
  io.puts "// This file was generated by a tool. Further invocations of this tool will overwrite this file."
  io.puts "// Edit it at your own risk."
  io.puts "//"
  io.puts ""
  io.puts "import CoreDataQueryInterface"
  io.puts ""
end

if $options.merged
  output_file = File.join($options.output_path, "#{model}#{$options.suffix}.swift")
  if $options.force || !File.exists?(output_file)
    File::open(output_file, 'w') do |io|
      write_file_header io
      iw = IndentWriter::new(io)
      entities.each do |entity|
        entity.render iw
      end
    end
    $stderr.puts "NOTICE: Wrote file #{output_file}."
  else
    abort "ERROR: The file '#{output_file}' exists and --force was not specified. Quitting."
  end
else
  entities.each do |entity|
    output_file = File.join($options.output_path, "#{entity.name}#{$options.suffix}.swift")
    if $options.force || !File.exists?(output_file)
      File::open(output_file, 'w') do |io|
        write_file_header io
        entity.render IndentWriter::new(io)
      end
      $stderr.puts "NOTICE: Wrote file #{output_file}."
    else
      $stderr.puts "WARNING: The file '#{output_file}' exists and --force was not specified. Skipping."
    end
  end
end
