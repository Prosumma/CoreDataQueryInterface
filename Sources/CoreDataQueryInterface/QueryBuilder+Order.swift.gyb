//
//  QueryBuilder+Order.swift
//  CoreDataQueryInterface
//
//  Created by Gregory Higley on 2022-10-22.
//
%{

def args(items, fmt=lambda i: f'{i}', sep=', '):
  return sep.join(map(fmt, items))
}%

import Foundation
import PredicateQI

public extension QueryBuilder {
  enum SortDirection {
    case ascending, descending
    
    var isAscending: Bool {
      self == .ascending
    }
  }
  
  func order(by sortDescriptors: [NSSortDescriptor]) -> QueryBuilder<M, R> {
    var query = self
    query.sortDescriptors.append(contentsOf: sortDescriptors)
    return query
  }
  
  func order(by sortDescriptors: NSSortDescriptor...) -> QueryBuilder<M, R> {
    order(by: sortDescriptors)
  }
  
  func order<V>(_ direction: SortDirection = .ascending, by keyPath: KeyPath<M, V>) -> QueryBuilder<M, R> {
    let sortDescriptor = NSSortDescriptor(keyPath: keyPath, ascending: direction.isAscending)
    var query = self
    query.sortDescriptors.append(sortDescriptor)
    return query
  }
% for i in range(2, 8):

  func order<${args(range(1, i + 1), lambda i: f'V{i}')}>(
    _ direction: SortDirection = .ascending,
    by ${args(range(1, i + 1), lambda i: f'keyPath{i}: KeyPath<M, V{i}>', ',\n    _ ')}
  ) -> QueryBuilder<M, R> {
    let sortDescriptors = [
% for k in range(1, i + 1):
      NSSortDescriptor(keyPath: keyPath${k}, ascending: direction.isAscending),
% end
    ]
    return order(by: sortDescriptors)
  }
% end
}
